from tkinter import*
from tkinter import ttk
import random
from datetime import datetime
from tkinter import font
import tkinter.messagebox
from turtle import width
from turtle import bgcolor
from PIL import Image
from PIL import ImageTk

#==============================================================||||LOGIN PAGE||||===================================================================

root = Tk()
root.title('Login')
root.geometry('925x500+300+200')
root.configure(bg="#fff")
root.resizable(False,False)

def signin():
     username = user.get()
     password = code.get()

     if username == 'admin' and password == '1234':
           root.destroy()


     elif username!='admin':
          tkinter.messagebox.showerror("Invalid","Invalid username")
     
     elif password!='1234':
          tkinter.messagebox.showerror("Invalid","Invalid password")


     

img = PhotoImage(file='image1.png')
Label(root,image=img,bg='white').place(x=200,y=150)

frame= Frame(root,width=350, height=350,bg="white")
frame.place(x=480,y=70)

heading =Label(frame,text='Sign in',fg='#57a1f8',bg='white',font=('Microsoft YaHei UI Light',23,'bold'))
heading.place(x=100,y=5)

#========================================
def on_enter(e):
     user.delete(0,'end')

def on_leave(e):
     name = user.get()
     if name=='':
          user.insert(0,'Username')


user = Entry(frame,width=25,fg='black',border=0,bg="white",font=('Microsoft YaHei UI Light',11))
user.place(x=30,y=80)
user.insert(0,'Username')
user.bind('<FocusIn>', on_enter)
user.bind('<FocusOut>',on_leave)

Frame(frame,width=295,height=2,bg='black').place(x=25,y=107)

#=============================================
def on_enter(e):
     code.delete(0,'end')

def on_leave(e):
     name = code.get()
     if name=='':
          code.insert(0,'Password')



code = Entry(frame,width=25,fg='black',border=0,bg="white",font=('Microsoft YaHei UI Light',11))
code.place(x=30,y=150)
code.insert(0,'Password')
code.bind('<FocusIn>',on_enter)
code.bind('<FocusOut>',on_leave)

Frame(frame,width=295,height=2,bg='black').place(x=25,y=177)


Button(frame,width=39,pady=7, text='Sign In',bg='#57a1f8',fg='white',border=0, command=signin).place(x=35,y=204)
label = Label(frame,text="Don't have an account?",fg='black',bg='white',font=('Microsoft YaHei UI Light',9))
label.place(x=75,y=270)

sign_up  = Button(frame,width=6,text='Sign Up',border=0,bg='white',cursor='hand2',fg='#57a1f8')
sign_up.place(x=215,y=270)
root.mainloop()


#==============================================================||||MAIN PAGE||||======================================================================


class library:

    def __init__(self,root):
        self.root =root
        self.root.title("Books Management System")
        self.root.geometry("1425x750+45+50")
        self.root.configure(background='powder blue')

        MType = StringVar()
        ref = StringVar()
        Title = StringVar()
        Firstname = StringVar()
        Surname = StringVar()
        Address1 = StringVar()
        Address2 = StringVar()
        PostCode = StringVar()
        MobileNo = StringVar()
        BookID = StringVar()
        BookTitle = StringVar()
        Author = StringVar()
        DateBorrowed = StringVar()
        DateDue = StringVar()
        SellingPrice = StringVar()
        LateReturnFine = StringVar()
        DateOverDue = StringVar()
        DaysOnLoan = StringVar()


        def iReset():
           MType.set("")
           ref.set("")
           Title.set("")
           Firstname.set("")
           Surname.set("")
           Address1.set("")
           Address2.set("")
           PostCode.set("")
           MobileNo.set("")
           BookID.set("")
           BookTitle.set("")
           Author.set("")
           DateBorrowed.set("")
           DateDue.set("")
           SellingPrice.set("")
           LateReturnFine.set("")
           DateOverDue.set("")
           DaysOnLoan.set("")
           self.txtFrameDetail.delete("1.0",END)


        def iDelete():
            iReset()
            self.txtDisplayR.delete("1.0",END)


        def iExit():
            iExit = tkinter.messagebox.askyesno ("Books Management System", "Confirm if you want to exit")
            if iExit>0:
                root.destroy()
                return

     

        def iDisplayData():
            self.txtFrameDetail.insert(END,"\t"+MType.get()+"\t\t"+ref.get()+"\t"+Title.get()+"\t"+Firstname.get()+"\t"+Surname.get()+"\t\t"+Address1.get()+"\t\t"+Address2.get()+"\t"+PostCode.get()+"\t"+BookTitle.get()+"\t\t"+DateBorrowed.get()+"\t\t"+DaysOnLoan.get()+"\n")
        
        
        def iReceipt():
            self.txtDisplayR.insert(END,'Member Type: \t\t' + MType.get()+"\n")
            self.txtDisplayR.insert(END,'Ref No: \t\t' + ref.get()+"\n")
            self.txtDisplayR.insert(END,'Title: \t\t' + Title.get()+"\n")
            self.txtDisplayR.insert(END,'Firstname: \t\t' + Firstname.get()+"\n")
            self.txtDisplayR.insert(END,'Surname: \t\t' + Surname.get()+"\n")
            self.txtDisplayR.insert(END,'Address 1: \t\t' + Address1.get()+"\n")
            self.txtDisplayR.insert(END,'Address 2: \t\t' + Address2.get()+"\n")
            self.txtDisplayR.insert(END,'Post Code: \t\t' + PostCode.get()+"\n")
            self.txtDisplayR.insert(END,'Mobile No: \t\t' + MobileNo.get()+"\n")
            self.txtDisplayR.insert(END,'Book ID: \t\t' + BookID.get()+"\n")
            self.txtDisplayR.insert(END,'Book Title: \t\t' + BookTitle.get()+"\n")
            self.txtDisplayR.insert(END,'Author: \t\t' + Author.get()+"\n")
            self.txtDisplayR.insert(END,'Date Borrowed: \t\t' + DateBorrowed.get()+"\n")


#============================================================||||FRAME||||======================================================================

        
        MainFrame = Frame(self.root)
        MainFrame.pack(expand=1, fill=BOTH)

        TitleFrame = Frame(MainFrame, width = 1350, padx = 20, bd = 20, relief = RIDGE)
        TitleFrame.pack(side=TOP)

        self.lblTitle = Label(TitleFrame, width = 39, font = ('arial',40,'bold','underline','italic'),text="\tBooks Management System\t",padx=12, pady=20)
        self.lblTitle.grid()

        ButtonFrame = Frame(MainFrame, bd = 20, width=1350, height=50, padx=20,relief=RIDGE)
        ButtonFrame.pack(side=BOTTOM)

        FrameDetail = Frame(MainFrame, bd = 20, width=1350, height=100, padx=20,pady=10,relief=RIDGE)
        FrameDetail.pack(side=BOTTOM)

        DataFrame = Frame(MainFrame, bd = 20, width=1300, height=400, padx=20,relief=RIDGE)
        DataFrame.pack()

        DataFrameLEFT = LabelFrame(DataFrame, bd=10, width=800, height=300, padx=20, relief=RIDGE ,font = ('arial',12,'bold'),text='Account Membership Info:')
        DataFrameLEFT.pack(side=LEFT)
        DataFrameRIGHT = LabelFrame(DataFrame, bd=10, width=450, height=300, padx=20, relief=RIDGE ,font=('arial',12,'bold'),text='Book Details:')
        DataFrameRIGHT.pack(side=RIGHT)


#============================================================||||WIDGET||||======================================================================

        self.lblMemberType = Label(DataFrameLEFT, font= ('arial',12,'bold'),text = 'MemberType:', padx=2, pady=2)
        self.lblMemberType.grid(row=0, column=0, sticky=W)

        self.cboMemberType = ttk.Combobox(DataFrameLEFT, font= ('arial',12,'bold'),state = 'readonly',textvariable=MType,width =23)
        self.cboMemberType['value']=('', 'Student','Lecturer','Admin Staff')
        self.cboMemberType.current(0)
        self.cboMemberType.grid(row=0, column=1)


        self.lblBookID = Label(DataFrameLEFT, font= ('arial',12,'bold'),text = 'Book ID:', padx=2, pady=2)
        self.lblBookID.grid(row=0, column=2, sticky=W)
        self.txtBookID = Entry(DataFrameLEFT, font= ('arial',12,'bold'),textvariable=BookID,width=25)
        self.txtBookID.grid(row=0, column=3,)


        self.lblRef = Label(DataFrameLEFT, font= ('arial',12,'bold'),text = 'Refernce No:', padx=2, pady=2)
        self.lblRef.grid(row=1, column=0, sticky=W)
        self.txtRef = Entry(DataFrameLEFT, font= ('arial',12,'bold'),textvariable= ref,width=25)
        self.txtRef.grid(row=1, column=1,)


        self.lblBookTitle = Label(DataFrameLEFT, font= ('arial',12,'bold'),text = 'Book Title:', padx=2, pady=2)
        self.lblBookTitle.grid(row=1, column=2, sticky=W)
        self.txtBookTitle = Entry(DataFrameLEFT, font= ('arial',12,'bold'),textvariable=BookTitle,width=25)
        self.txtBookTitle.grid(row=1, column=3,)

        self.lblTitle = Label(DataFrameLEFT, font= ('arial',12,'bold'),text = 'Title:', padx=2, pady=2)
        self.lblTitle.grid(row=2, column=0, sticky=W)

        self.cboTitle=ttk.Combobox(DataFrameLEFT, state='readonly',textvariable=Title, font= ('arial',12,'bold'), width=23)
        self.cboTitle['value']=('','Mr.','Miss.','Mrs.','Dr.','Capt.','Ms.')
        self.cboTitle.current(0)
        self.cboTitle.grid(row=2, column=1)


        self.lblAuthor=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Author:", padx=2, pady=2)
        self.lblAuthor.grid(row=2, column=2, sticky=W)
        self.txtAuthor = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable= Author, width =25)
        self.txtAuthor.grid(row=2, column=3)


        self.lblFirstname=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Firstname:", padx=2, pady=2)
        self.lblFirstname.grid(row=3, column=0, sticky=W)
        self.txtFirstname = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable= Firstname, width =25)
        self.txtFirstname.grid(row=3, column=1)


        self.lblDateBorrowed=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Date Borrowed:", padx=2, pady=2)
        self.lblDateBorrowed.grid(row=3, column=2, sticky=W)
        self.txtDateBorrowed = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=DateBorrowed, width =25)
        self.txtDateBorrowed.grid(row=3, column=3)


        self.lblSurname=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Surname:", padx=2, pady=6)
        self.lblSurname.grid(row=4, column=0, sticky=W)
        self.txtSurname = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=Surname, width =25)
        self.txtSurname.grid(row=4, column=1)


        self.lblDateDue=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Date Due:", padx=2, pady=2)
        self.lblDateDue.grid(row=4, column=2, sticky=W)
        self.txtDateDue = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=DateDue, width =25)
        self.txtDateDue.grid(row=4, column=3)


        self.lblAddress1=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Address 1:", padx=2, pady=2)
        self.lblAddress1.grid(row=5, column=0, sticky=W)
        self.txtAddress1 = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=Address1, width =25)
        self.txtAddress1.grid(row=5, column=1)


        self.lblDaysOnLoan=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Days On Loan:", padx=2, pady=2)
        self.lblDaysOnLoan.grid(row=5, column=2, sticky=W)
        self.txtDaysOnLoan = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=DaysOnLoan, width =25)
        self.txtDaysOnLoan.grid(row=5, column=3)


        self.lblAddress2=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Address 2:", padx=2, pady=2)
        self.lblAddress2.grid(row=6, column=0, sticky=W)
        self.txtAddress2 = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=Address2, width =25)
        self.txtAddress2.grid(row=6, column=1)


        self.lblLateReturnFine=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Late Return Fine:", padx=2, pady=2)
        self.lblLateReturnFine.grid(row=6, column=2, sticky=W)
        self.txtLateReturnFine = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=LateReturnFine, width =25)
        self.txtLateReturnFine.grid(row=6, column=3)
        

        self.lblPostCode=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Post Code:", padx=2, pady=2)
        self.lblPostCode.grid(row=7, column=0, sticky=W)
        self.txtPostCode = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=PostCode, width =25)
        self.txtPostCode.grid(row=7, column=1)


        self.lblDateOverDue=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Date Over Due:", padx=2, pady=2)
        self.lblDateOverDue.grid(row=7, column=2, sticky=W)
        self.txtDateOverDue = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=DateOverDue, width =25)
        self.txtDateOverDue.grid(row=7, column=3)


        self.lblMobileNo=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Mobile No:", padx=2, pady=2)
        self.lblMobileNo.grid(row=8, column=0, sticky=W)
        self.txtMobileNo = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=MobileNo, width =25)
        self.txtMobileNo.grid(row=8, column=1)


        self.lblSellingPrice=Label(DataFrameLEFT, font= ('arial',12,'bold'), text="Price of book:", padx=2, pady=2)
        self.lblSellingPrice.grid(row=8, column=2, sticky=W)
        self.txtSellingPrice = Entry(DataFrameLEFT, font =('arial',12,'bold'),textvariable=SellingPrice, width =25)
        self.txtSellingPrice.grid(row=8, column=3)



        #============================================================||||WIDGET(BOOK DETAILS)||||=============================================================

        self.txtDisplayR = Text(DataFrameRIGHT, font =('arial',12,'bold'), width =32, height=13, padx=8, pady=20)
        self.txtDisplayR.grid(row=0, column=2)

         #============================================================||||LISTBOX||||=============================================================

        scrollbar = Scrollbar(DataFrameRIGHT)
        scrollbar.grid(row=0,column=1,sticky='ns')


       
        ListOfBooks = ['The Secret History','Database Systems','The Alchemist','To Kill a Mockingbrd','Graph Theory','Game Of Thrones','Five point someone','Discrete Mathematics','Python Programming','Software Engineering','Database Management System','Computer Networks','Harry Potter','Data Structre and Algorithms','Computer Science and IT Engineering']

        def SelectBook(evt):
            value = str(booklist.get(booklist.curselection()))
            w = value

            if(w== "The Secret History"):
                BookID.set("ISBN 1234560258")
                BookTitle.set("Murder Mystry")
                Author.set("Donna Tartt")

                LateReturnFine.set("20RS")
                SellingPrice.set("330RS")
                DaysOnLoan.set(15)
                iReceipt()

                import datetime

                d1= datetime.date.today()
                d2= datetime.timedelta(days=15)
                d3 = (d1+d2)
                DateBorrowed.set(d1)
                DateDue.set(d3)
                DateOverDue.set("No")


            elif(w== "Python Programming"):
                 BookID.set("ISBN 4567898520")
                 BookTitle.set("A Modular Approach")
                 Author.set("Sheetal Taneja & Naveen Kumar")

                 LateReturnFine.set("10RS")
                 
                 SellingPrice.set("470RS")
                 DaysOnLoan.set(15)
                 iReceipt()

                 import datetime

                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")

            elif(w== "The Alchemist"):
                 BookID.set("ISBN 9788172234")
                 BookTitle.set("Chasing Dream")
                 Author.set("Paulo Coelho")

                 LateReturnFine.set("20RS")
                 SellingPrice.set("850RS")
                 DaysOnLoan.set(15)
                 iReceipt()

                 import datetime

                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")

            elif(w== "To Kill a Mockingbrd"):
                 BookID.set("ISBN 9780099549")
                 BookTitle.set("Mocking Bird")
                 Author.set("Harper Lee")

                 LateReturnFine.set("30RS")
                 SellingPrice.set("1090RS")
                 DaysOnLoan.set(15)
                 iReceipt()

                 import datetime

                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")         

            elif(w== "Database Systems"):
                 BookID.set("ISBN 9789332585")
                 BookTitle.set("Fundamentals ")
                 Author.set("Ramez Elmasri & Shamkant B. Navathe")

                 LateReturnFine.set("20RS")
                 SellingPrice.set("610RS")
                 DaysOnLoan.set(15)
                 iReceipt()

                 import datetime

                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")   


            elif(w== "Computer Science and IT Engineering"):
                 BookID.set("ISBN 9393165165")
                 BookTitle.set("GATE 2023")
                 Author.set("Made Easy")

                 LateReturnFine.set("20RS")
                 SellingPrice.set("620RS")
                 DaysOnLoan.set(15)
                 iReceipt()

                 import datetime

                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")


            elif(w== "Graph Theory"):
                 BookID.set("ISBN 0486807932")
                 BookTitle.set("GATE 2023")
                 Author.set("Narsingh Deo")

                 LateReturnFine.set("30RS")
                 SellingPrice.set("1630RS")
                 DaysOnLoan.set(15)
                 iReceipt()

                 import datetime

                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")


            elif(w== "Software Engineering"):
                 BookID.set("ISBN 5678907530")
                 BookTitle.set("Clean Code")
                 Author.set("Robert C. Martin")
                 LateReturnFine.set("50RS")
                 SellingPrice.set("1650RS")
                 DaysOnLoan.set(15)
                 iReceipt()
                 import datetime
                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")


            elif(w== "Database Management System"):
                 BookID.set("ISBN 6789010357")
                 BookTitle.set("DBMS")
                 Author.set("Dr. Rajiv Chopra")
                 LateReturnFine.set("20RS")
                 SellingPrice.set("420RS")
                 DaysOnLoan.set(15)
                 iReceipt()
                 import datetime
                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")


            elif(w== "Discrete Mathematics"):
                 BookID.set("ISBN 3456789510")
                 BookTitle.set("7th Edition")
                 Author.set("Kenneth H.Rosen")
                 LateReturnFine.set("30RS")
                 SellingPrice.set("990RS")
                 DaysOnLoan.set(15)
                 iReceipt()
                 import datetime
                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")


            elif(w== "Computer Networks"):
                 BookID.set("ISBN 7890120159")
                 BookTitle.set("Computer Networks")
                 Author.set("Andrew S.Tanenbaum , David & Wetherall")
                 LateReturnFine.set("30RS")
                 SellingPrice.set("700RS")
                 DaysOnLoan.set(15)
                 iReceipt()
                 import datetime
                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")


            elif(w== "Data Structure & Algorithms"):
                 BookID.set("ISBN 8901238420")
                 BookTitle.set("DSA Made Easy")
                 Author.set("Narasimha Karumanchi")
                 LateReturnFine.set("25RS")
                 SellingPrice.set("680RS")
                 DaysOnLoan.set(15)
                 iReceipt()
                 import datetime
                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")


            elif(w== "Game Of Thrones"):
                 BookID.set("ISBN 2345670248")
                 BookTitle.set("Fire & Blood")
                 Author.set("George R.R Martin")
                 LateReturnFine.set("300RS")
                 SellingPrice.set("2650RS")
                 DaysOnLoan.set(15)
                 iReceipt()
                 import datetime
                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")
                

            elif(w== "Harry Potter"):
                 BookID.set("ISBN 9012349530")
                 BookTitle.set("The Philosopher's Stone")
                 Author.set("J.K. Rowling")
                 LateReturnFine.set("30RS")
                 SellingPrice.set("990RS")
                 DaysOnLoan.set(15)
                 iReceipt()
                 import datetime
                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")           
        

            elif(w== "Five point someone"):
                 BookID.set("ISBN 0123450359")
                 BookTitle.set("Five Point Someone")
                 Author.set("Chetan Bhagat")
                 LateReturnFine.set("10RS")
                 SellingPrice.set("200RS")
                 DaysOnLoan.set(15)
                 iReceipt()
                 import datetime
                 d1= datetime.date.today()
                 d2= datetime.timedelta(days=15)
                 d3 = (d1+d2)
                 DateBorrowed.set(d1)
                 DateDue.set(d3)
                 DateOverDue.set("No")       

        
        
        booklist = Listbox(DataFrameRIGHT, width=20, height=12, font=('arial',12,'bold'))
        booklist.bind('<<ListboxSelect>>', SelectBook)
        booklist.grid(row=0, column=0, padx=8)
        scrollbar.config(command=booklist.yview)

        for items in ListOfBooks:
            booklist.insert(END,items)

     
        

        self.lblLabel= Label(FrameDetail,font=('arial',10,'bold'),pady=8, text="Member Type\t Reference No.\t Title\t Firstname\t Surname\t Address 1\t Address 2\t Post Code\t Book Title\t Date Borrowed\t Days On Loan",)
        self.lblLabel.grid(row=0, column=0)
  

        self.txtFrameDetail = Text(FrameDetail, font=('arial',12,'bold'),width=141, height=4, padx=2, pady=4)
        self.txtFrameDetail.grid(row=1, column=0)


                                  
 #============================================================||||BUTTON||||=============================================================



        self.btnDisplayData=Button(ButtonFrame, text = 'Display Data', font= ('arial', 12, 'bold'), width=30, bd=4, command=iDisplayData)
        self.btnDisplayData.grid(row=0, column=1)


        self.btnDelete=Button(ButtonFrame, text = 'Delete', font= ('arial', 12, 'bold'), width=30, bd=5, command=iDelete)
        self.btnDelete.grid(row=0, column=2)


        self.btnReset=Button(ButtonFrame, text = 'Reset', font= ('arial', 12, 'bold'), width=31, bd=5, command=iReset)
        self.btnReset.grid(row=0, column=3)


        self.btnExit=Button(ButtonFrame, text = 'Exit', font= ('arial', 12, 'bold'), width=30, bd=5, command=iExit)
        self.btnExit.grid(row=0, column=4)
if __name__ =='__main__':
    root = Tk()
    application  = library(root)
    root.mainloop()   
